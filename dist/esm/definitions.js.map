{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,uCAAuC","sourcesContent":["/// <reference types=\"@capacitor/cli\"/>\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    ApplePaySession?: {\n      /**\n       * The merchant ID\n       */\n      merchantId?: string;\n\n      /** The payment methods (networks) that you support. */\n      supportedNetworks?: ApplePayNetwork[];\n\n      /** The merchant’s two-letter ISO 3166 country code. */\n      countryCode?: string;\n\n      /** The three-letter ISO 4217 currency code that determines the currency the payment request uses. */\n      currencyCode?: string;\n\n      /** Time to close sheet after was opened in miliseconds.\n       * @default 30000 miliseconds\n       */\n      timeToCloseSheet?: number;\n    };\n  }\n}\n\n/**\n * Represents the supported payment networks for Apple Pay transactions.\n *\n * - `'visa'`: Visa card network.\n * - `'masterCard'`: MasterCard network.\n * - `'amex'`: American Express network.\n * - `'discover'`: Discover card network.\n */\nexport type ApplePayNetwork = 'visa' | 'mastercard' | 'amex' | 'discover';\n\n/**\n * Represents an item in an Apple Pay payment request.\n */\nexport interface ApplePayItem {\n  /** The total amount to be charged for the payment. */\n  amount: string;\n  /** A description or label for the payment request. */\n  label: string;\n}\n\n/**\n * Represents a request to initiate an Apple Pay payment.\n */\nexport interface ApplePayRequest {\n  /**An array of payment summary item objects that summarize the amount of the payment. The last item must be the total. */\n  items: ApplePayItem[];\n  /** The merchant’s two-letter ISO 3166 country code. */\n  countryCode?: string;\n  /** The three-letter ISO 4217 currency code that determines the currency the payment request uses. */\n  currencyCode?: string;\n  /** The payment methods (networks) that you support. */\n  supportedNetworks?: ApplePayNetwork[];\n  /** Your merchant Id; You can provide from Capacitor config. */\n  merchantId?: string;\n}\n\n/**\n * Represents a payment request for Apple Pay Payment, extending the base `ApplePayRequest`.\n *\n * @property url - .\n * @property headers - A record of HTTP headers to include in the request.\n * @property body - The payload to be sent with the payment request.\n * @property sessionIn - The key within the body that represents the session information.\n */\nexport interface ApplePayPayment<Body> extends ApplePayRequest {\n  /**The endpoint URL for the payment request */\n  url: string;\n  /**A record of HTTP headers to include in the request. */\n  headers: Record<string, string>;\n  /**The payload to be sent with the payment request. */\n  body: Body;\n  /**The key within the body where the ApplePay session will be place. */\n  sessionIn: keyof Body;\n}\n\nexport type ApplePayCode =\n  | 'missing_merchant_id'\n  | 'missing_amount'\n  | 'missing_url'\n  | 'missing_body'\n  | 'missing_session_in'\n  | 'invalid_amount'\n  | 'invalid_country_code'\n  | 'invalid_currency_code'\n  | 'invalid_networks'\n  | 'empty_supported_networks'\n  | 'empty_items'\n  | 'payment_authorized'\n  | 'payment_reject'\n  | 'session_canceled'\n  | 'session_failed'\n  | 'request_failed'\n  | 'applepay_not_available'\n  | 'paymentsheet_problem_opening'\n  | 'paymentsheet_problem_closing'\n  | 'applepay_error'\n  | 'uknown_error';\n\n/**\n * Represents a session for Apple Pay transactions.\n *\n * @property token - The Apple Pay payment data associated with the session.\n */\nexport interface AppleyPayToken {\n  token: string;\n}\n\n/**\n * Represents the response from an Apple Pay payment operation.\n */\nexport interface ApplePayPaymentResponse<Response> {\n  /**The actual response data returned from the Apple Pay payment. */\n  response: Response;\n}\n\n/**\n * Represents an error that occurred during an Apple Pay operation.\n *\n * @property message - A message explaining the error.\n * @property code - Code of error.\n */\nexport interface ApplePayError {\n  message: string;\n  code: ApplePayCode;\n}\n\nexport interface ApplePayServerErrorData {\n  statusCode: number;\n  headers?: Record<string, string>;\n  error: any;\n  timestamp: string;\n}\n\nexport interface ApplePayStatus {\n  status: 'error' | 'success';\n}\n\nexport interface ApplePaySessionPlugin {\n  /**\n   * @method getSession\n   * Initiates an Apple Pay session with the provided request details.\n   * @param request - An `ApplePayRequest` object containing session configuration.\n   * @returns A promise that resolves with an `AppleyPayToken` upon successful session creation.\n   * @throws A promise that reject with an `ApplePayError` message.\n   */\n  getSession(request: ApplePayRequest): Promise<AppleyPayToken>;\n\n  /**\n   * @method initiatePayment\n   * Initiates an Apple Pay Payment request using a url.\n   * @param request - An `ApplePayRequest` object containing session configuration.\n   * @returns A promise that resolves with an `AppleyPayToken` upon successful session creation.\n   * @throws A promise that reject with an `ApplePayError` message.\n   */\n  initiatePayment<Body, Response>(paymentRequest: ApplePayPayment<Body>): Promise<ApplePayPaymentResponse<Response>>;\n\n  /**\n   * @method completeSession\n   * Complete Apple Pay session.\n   * @param status - An `ApplePayStatus` object containing session status.\n   * @returns A promise that resolves with empty value.\n   * @throws A promise that reject with an `ApplePayError` message.\n   */\n  completeSession(status: ApplePayStatus): Promise<void>;\n\n  /**\n   * @method canMakePayments\n   * Check if Apple Pay is available.\n   * @returns A promise that resolves **true** if Apple Pay is available.\n   */\n  canMakePayments(): Promise<{ status: boolean }>;\n}\n"]}